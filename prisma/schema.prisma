generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://primevideo:Jd1SOhLPG9BHo4hahpiiPpoMciBLm6J9@dpg-chgl3abhp8u065o3r990-a.frankfurt-postgres.render.com/primevideo_ya7v"
}

model Genre {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  movies Movie[]
}

model Video {
  id       Int     @id @default(autoincrement())
  filename String  @unique
  type     String
  movies   Movie[]
}

model Image {
  id       Int      @id @default(autoincrement())
  filename String   @unique
  People   People[]
  movies   Movie[]
  movie    Movie[]  @relation("MainPoster")
}

model People {
  id         Int              @id @default(autoincrement())
  name       String           @unique
  profession String
  imageId    Int
  Image      Image            @relation(fields: [imageId], references: [id])
  movies     PeopleOnMovies[]
}

model Movie {
  id            Int              @id @default(autoincrement())
  title         String
  description   String
  releaseDate   DateTime
  duration      Int
  numberOfViews Int              @default(0)
  rating        Int?
  country       String?
  Genre         Genre[]
  Video         Video[]
  Image         Image[]
  People        PeopleOnMovies[]
  Favorite      Favorite[]
  History       History[]
  Comment       Comment[]
  mainPosterId  Int?
  mainPoster    Image?           @relation("MainPoster", fields: [mainPosterId], references: [id])
  WatchLater    WatchLater[]
}

model PeopleOnMovies {
  id       Int    @id @default(autoincrement())
  movieId  Int
  peopleId Int
  Role     String
  Movie    Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  People   People @relation(fields: [peopleId], references: [id])

  @@unique([movieId, peopleId, Role])
}

model Favorite {
  userId  String
  movieId Int
  User    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@id([userId, movieId])
}

model WatchLater {
  userId  String
  movieId Int
  User    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@id([userId, movieId])
}

model History {
  userId   String
  movieId  Int
  time     DateTime @default(now())
  progress Float    @default(0)
  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Movie    Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@id([userId, movieId, time])
}

model Comment {
  id        Int      @id @default(autoincrement())
  rating    Int
  content   String?
  createdOn DateTime @default(now())
  userId    String
  movieId   Int
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique
  User User[]
}

model User {
  id         String       @id @default(uuid())
  username   String       @unique
  password   String
  email      String       @unique
  createdOn  DateTime     @default(now())
  updatedOn  DateTime     @default(now())
  RoleId     Int
  Role       Role         @relation(fields: [RoleId], references: [id])
  Favorite   Favorite[]
  History    History[]
  Comment    Comment[]
  WatchLater WatchLater[]
}
