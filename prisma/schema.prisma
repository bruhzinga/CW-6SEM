generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Genre {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)
  movies Movie[]
}



model Video {
  id       Int    @id @default(autoincrement())
  filename String @unique @db.VarChar(255)
  movies   Movie[]
}

model Image {
  id       Int      @id @default(autoincrement())
  filename String   @unique @db.VarChar(255)
  People   People[]
  movies   Movie[]
}

model People {
  id      Int   @id @default(autoincrement())
  name    String @unique @db.VarChar(255)
  profession  String @db.VarChar(255)
  imageId Int
  Image   Image  @relation(fields: [imageId], references: [id])
  movies  PeopleOnMovies[]
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)
  User User[]
}

model User {
  id        String   @id @default(dbgenerated("newsequentialid()")) @db.UniqueIdentifier
  username  String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  createdOn DateTime @default(now())
  updatedOn DateTime @default(now())
  RoleId    Int
  Role      Role     @relation(fields: [RoleId], references: [id])
}

model Movie{
  id Int @id @default(autoincrement())
  title String @db.VarChar(255)
  description String
  releaseDate DateTime
  duration Int
  numberOfViews Int @default(0)
  rating Int?
  Genre  Genre[]
  Video  Video[]
  Image  Image[]
  People PeopleOnMovies[]

}

model PeopleOnMovies {
  movieId Int
  peopleId Int
  Role String
  Movie Movie @relation(fields: [movieId], references: [id])
  People People @relation(fields: [peopleId], references: [id])
  @@id([movieId, peopleId, Role])
}
